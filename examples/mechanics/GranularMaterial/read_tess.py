


def read_tesselation(filename):

    tesselation={}

    file = open(filename, 'r')
    lines = file.readlines()
    file.close()

    line_number=0
    valid_tess_file=False
    for line in lines:
        if '***tess' in line:
            valid_tess_file = True
        if '**vertex'in line:
            id_line_vertex=line_number+2
            tesselation['nb_vertex'] = int(lines[line_number+1])
        if '**edge'in line:
            id_line_edge=line_number+2
            tesselation['nb_edge'] = int(lines[line_number+1])
        if '**face'in line:
            id_line_face=line_number+2
            tesselation['nb_face'] = int(lines[line_number+1])
        if '**polyhedron'in line:
            id_line_polyhedron=line_number+2
            tesselation['nb_polyhedron'] = int(lines[line_number+1])
        line_number = line_number+1

    if not valid_tess_file:
        print('The file is not a tess file generated by NEPER')
        return None

    #print(tesselation)
    # read vertices
    def read_vertex(line):
        l_split = line.split(' ')
        (id_v, id_x, id_y, id_z) = [t(s) for t,s in zip((int,float,float,float),line.split())]
        return [id_v, id_x, id_y, id_z]

    tesselation['vertex'] =[]
    for v in range (tesselation['nb_vertex']):
          tesselation['vertex'].append(read_vertex(lines[id_line_vertex+v]))

    # read edges
    def read_edge(line):
        l_split = line.split(' ')
        (id_v, id_a, id_b, dummy) = [t(s) for t,s in zip((int,int,int,int),line.split())]
        return [id_v, id_a, id_b]

    tesselation['edge'] =[]
    for v in range (tesselation['nb_edge']):
          tesselation['edge'].append(read_edge(lines[id_line_edge+v]))

    # read faces
    def read_face(line, line1, line2, line3):
        l_split = line.replace(":"," ").split()
        id_f = int(l_split[0])
        nb_v = int(l_split[1])
        vertices=[]
        for v in range(nb_v):
            vertices.append(int(l_split[2+v]))

        l_split = line1.replace(":"," ").split()
        nb_e = int(l_split[0])
        edges=[]
        for e in range(nb_e):
            edges.append(int(l_split[1+e]))
        return [id_f, vertices, edges]

    tesselation['face'] =[]
    for v in range (tesselation['nb_face']):
        id_line=id_line_face+v*4
        tesselation['face'].append(
            read_face(lines[id_line],
                      lines[id_line+1],
                      lines[id_line+2],
                      lines[id_line+3]))


    # read polyhedron
    def read_polyhedron(line):
         l_split = line.replace(":"," ").split()
         id_p = int(l_split[0])
         nb_f = int(l_split[1])
         faces=[]
         for f in range(nb_f):
             faces.append(int(l_split[2+f]))
         #input()
         return [id_p, faces]

    tesselation['polyhedron']=[]
    for p in range (tesselation['nb_polyhedron']):
        id_line=id_line_polyhedron+p
        tesselation['polyhedron'].append(
            read_polyhedron(lines[id_line]))


    return tesselation

#filename='n100-id1.tess'
#tesselation = read_tesselation(filename)
#print(tesselation)
