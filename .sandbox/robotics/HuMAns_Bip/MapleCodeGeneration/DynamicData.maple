# Copyright (C) INRIA 1999-2005
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# 
# Author(s): Pierre-Brice Wieber
# Affiliation(s): INRIA, team BIPOP
# Email(s): Pierre-Brice.Wieber@inria.fr
# 
# Description:
# 
# Modifications:
# $Log$
# Revision 1.1  2005/02/08 13:05:36  rpissard
# Initial revision
#
# 

#
# Dynamique du Robot BIP2000
#
# BASE LIBRE == pelvis
#
# Pierre-Brice le 8/12/99
#

# Informations dynamiques sur les différents solides du robot

# Vecteur gravité
Gravity := vector([0, -9.81, 0]):

# Solide 1 : (inexistant)
m_1  := 0:
G_1  := vector([0, 0, 0]*1e-3):
IO_1 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 2 : (inexistant)
m_2  := 0:
G_2  := vector([0, 0, 0]*1e-3):
IO_2 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 3 : (inexistant)
m_3  := 0:
G_3  := vector([0, 0, 0]*1e-3):
IO_3 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 4 : (inexistant)
m_4  := 0:
G_4  := vector([0, 0, 0]*1e-3):
IO_4 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 5 : (inexistant)
m_5  := 0:
G_5  := vector([0, 0, 0]*1e-3):
IO_5 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 6 : pelvis
m_6  := 8.8:
G_6  := vector([0, 12, -68]*1e-3):
IO_6 := matrix([[13, 0, 0],[0, 14, 2],[0, 2, 5]]*1e-2):

# Solide 7 : equerre hanche droite
m_7  := 3.2:
G_7  := vector([5, -29, -107]*1e-3):
IO_7 := matrix([[6, 0, 0],[0, 5, -1],[0, -1, 1]]*1e-2):

# Solide 8 : levier hanche droite
m_8  := 0.7:
G_8  := vector([-2, 0, 34]*1e-3):
IO_8 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 9 : cuisse droite
m_9  := 10.9:
G_9  := vector([160, -5, 45]*1e-3):
IO_9 := matrix([[6, 1, -6],[1, 41, 0],[-6, 0, 38]]*1e-2):

# Solide 10 : tibia droit
m_10  := 5.93:
G_10  := vector([152, -28, 0]*1e-3):
IO_10 := matrix([[2, 3, 0],[3, 21, 0],[0, 0, 21]]*1e-2):

# Solide 11 : cardan droit
m_11  := 0.18:
G_11  := vector([0, 0, 0]*1e-3):
IO_11 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 12 : pied droit
m_12  := 2.34:
G_12  := vector([59, 0, 19]*1e-3):
IO_12 := matrix([[2, 0, 0],[0, 3, 0],[0, 0, 1]]*1e-2):

# Solide 13 : (inexistant)
m_13  := 0:
G_13  := vector([0, 0, 0]*1e-3):
IO_13 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 14 : equerre hanche gauche
m_14  := 3.2:
G_14  := vector([-5, -29, -107]*1e-3):
IO_14 := matrix([[6, 0, 0],[0, 5, -1],[0, -1, 1]]*1e-2):

# Solide 15 : levier hanche gauche
m_15  := 0.7:
G_15  := vector([-2, 0, 34]*1e-3):
IO_15 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 16 : cuisse gauche
m_16  := 10.9:
G_16  := vector([160, -5, -45]*1e-3):
IO_16 := matrix([[6, 1, 6],[1, 41, 0],[6, 0, 38]]*1e-2):

# Solide 17 : tibia gauche
m_17  := 5.93:
G_17  := vector([152, -28, 0]*1e-3):
IO_17 := matrix([[2, 3, 0],[3, 21, 0],[0, 0, 21]]*1e-2):

# Solide 18 : cardan gauche
m_18  := 0.18:
G_18  := vector([0, 0, 0]*1e-3):
IO_18 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 19 : pied gauche
m_19  := 2.34:
G_19  := vector([59, 0, 19]*1e-3):
IO_19 := matrix([[2, 0, 0],[0, 3, 0],[0, 0, 1]]*1e-2):

# Solide 20 : (inexistant)
m_20  := 0:
G_20  := vector([0, 0, 0]*1e-3):
IO_20 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 0]]*1e-2):

# Solide 21 : levier lombaires
m_21  := 1.05:
G_21  := vector([0, 47, -25]*1e-3):
IO_21 := matrix([[0, 0, 0],[0, 0, 0],[0, 0, 1]]*1e-2):

# Solide 22 : cardan armoire
m_22  := 0.46:
G_22  := vector([0, 0, 46]*1e-3):
IO_22 := matrix([[1, 0, 0],[0, 0, 0],[0, 0, 1]]*1e-2):

# Solide 23 : support armoire + armoire
m_23  := 48:
G_23  := vector([405, 13, 9]*1e-3):
IO_23 := matrix([[126, 6, -6],[6, 1075, 0],[-6, 0, 1026]]*1e-2):
