# Copyright (C) INRIA 1999-2005
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# 
# Author(s): Pierre-Brice Wieber
# Affiliation(s): INRIA, team BIPOP
# Email(s): Pierre-Brice.Wieber@inria.fr
# 
# Description:
# 
# Modifications:
# $Log: ModelGeneration.maple,v $
# Revision 3.0.0.1  2005/02/08 13:06:01  rpissard
# version start HuMAnS
#
# 

printf("        -------------------------------------------\n");
printf("                        HuMAnS-1.0\n");
printf("               Maple C code generation for\n");
printf("           A Scilab toolbox for Humanoid Motion\n");
printf("                  Analysis and simulation\n");
printf("               Copyright (C) INRIA 1999-2005\n");
printf("        -------------------------------------------\n");

with(linalg):
with(codegen, C, makeproc):

FrameMatrix := proc(k) option remember;

	RETURN(matrix([[cos(eval(cat(theta_,k))), -sin(eval(cat(theta_,k))), 0, eval(cat(r_,k))],
			[cos(eval(cat(alpha_,k)))*sin(eval(cat(theta_,k))), cos(eval(cat(alpha_,k)))*cos(eval(cat(theta_,k))), -sin(eval(cat(alpha_,k))), -sin(eval(cat(alpha_,k)))*eval(cat(lambda_,k))],
			[sin(eval(cat(alpha_,k)))*sin(eval(cat(theta_,k))), sin(eval(cat(alpha_,k)))*cos(eval(cat(theta_,k))), cos(eval(cat(alpha_,k))), cos(eval(cat(alpha_,k)))*eval(cat(lambda_,k))],
			[0, 0, 0, 1]])):
end:

NLEffectsRecursion := proc(j, Omegai, Omegadoti, Accelerationi, Ui)
local FrameChange, R, P, RTRdot, RTPdot, RTOmegai, Omegaj,
	Omegadotj, Accelerationj, Uj, F, M, Gamma, k, Result, RF;

	FrameChange := FrameMatrix(j):
	R := submatrix(FrameChange, 1..3, 1..3):
	P := subvector(FrameChange, 1..3, 4):
	RTRdot := map(simplify, evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), R))):
	RTRdot := Vector([RTRdot[3, 2], RTRdot[1, 3], RTRdot[2, 1]]):
	RTPdot := evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), P)):

	RTOmegai := evalm(transpose(R)&*Omegai):
	Omegaj := evalm(RTOmegai+RTRdot):
	Omegadotj := evalm(transpose(R)&*Omegadoti+crossprod(RTOmegai, RTRdot)):
	Accelerationj := evalm(transpose(R)&*(Accelerationi+Ui&*P)+2*crossprod(RTOmegai, RTPdot)):

	Uj := matrix([[-Omegaj[3]^2-Omegaj[2]^2, -Omegadotj[3]+Omegaj[2]*Omegaj[1], Omegadotj[2]+Omegaj[3]*Omegaj[1]], [Omegadotj[3]+Omegaj[2]*Omegaj[1], -Omegaj[3]^2-Omegaj[1]^2, -Omegadotj[1]+Omegaj[3]*Omegaj[2]], [-Omegadotj[2]+Omegaj[3]*Omegaj[1], Omegadotj[1]+Omegaj[3]*Omegaj[2], -Omegaj[2]^2-Omegaj[1]^2]]):

	F := evalm(cat(m_,j)*Accelerationj+Uj&*(cat(m_,j)*cat(G_,j))):
	M := evalm(cat(IO_,j)&*Omegadotj+crossprod(Omegaj,cat(IO_,j)&*Omegaj)+crossprod(cat(m_,j)*cat(G_,j),Accelerationj)):
	Gamma := vector(NDDL, 0):

	for k from 1 to NSOL
	do
		if eval(cat(ref_,k)) = j
		then
			Result := NLEffectsRecursion(k, Omegaj, Omegadotj, Accelerationj, Uj):
			F := evalm(F+Result[1]):
			M := evalm(M+Result[2]):
			Gamma := evalm(Gamma+Result[3]):
		fi:
	od:

	Gamma := evalm(Gamma+transpose(jacobian(RTRdot, qdot))&*M+transpose(jacobian(RTPdot, qdot))&*F):
	RF := evalm(R&*F);
	#print(map(x->if x=0 then 0 else 1 fi, Gamma));
	print(cat(`Frame `,j));
	RETURN([evalm(RF), evalm(R&*M+crossprod(P, RF)), evalm(Gamma)]):
end:

NLEffectsVector := proc()
local Result;

	print(`NLEffects Vector`);
	Result := NLEffectsRecursion(1, [0, 0, 0], [0, 0, 0], evalm(-Gravity), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]):
	RETURN(Result[3]):
end:

InertiaRecursion := proc(j)
local FrameChange, R, P, RTRdot, RTPdot, JR, JP, m, mG, IO, F, M, Inertia, k, Result, mGx, FTJP, MTJR, Fadd, Madd, RmG, RmGx, RF, Px;

	FrameChange := FrameMatrix(j):
	R := submatrix(FrameChange, 1..3, 1..3):
	P := subvector(FrameChange, 1..3, 4):
	RTRdot := map(simplify, evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), R))):
	RTPdot := evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), P)):
	JR := jacobian(vector([RTRdot[3, 2], RTRdot[1, 3], RTRdot[2, 1]]), qdot):
	JP := jacobian(RTPdot, qdot):

	m := eval(cat(m_,j)):
	mG := evalm(m*cat(G_,j)):
	IO := evalm(cat(IO_,j)):
	F := matrix(3, NDDL, 0):
	M := matrix(3, NDDL, 0):
	Inertia := matrix(NDDL, NDDL, 0):

	for k from 1 to NSOL
	do
		if eval(cat(ref_,k)) = j
		then
			Result := InertiaRecursion(k):
			m := evalm(m+Result[1]):
			mG := evalm(mG+Result[2]):
			IO := evalm(IO+Result[3]):
			F := evalm(F+Result[4]):
			M := evalm(M+Result[5]):
			Inertia := evalm(Inertia+Result[6]):
		fi:
	od:

	mGx := matrix([[0, -mG[3], mG[2]], [mG[3], 0, -mG[1]], [-mG[2], mG[1], 0]]):
	FTJP := evalm(transpose(F)&*JP):
	MTJR := evalm(transpose(M)&*JR):
	Fadd := evalm(m*JP-mGx&*JR):
	Madd := evalm(IO&*JR+mGx&*JP):
	Inertia := evalm(Inertia+FTJP+transpose(FTJP)+MTJR+transpose(MTJR)+transpose(Fadd)&*JP+transpose(Madd)&*JR):
	F := evalm(F+Fadd):
	M := evalm(M+Madd):
	RmG := evalm(R&*mG):
	RmGx := matrix([[0, -RmG[3], RmG[2]], [RmG[3], 0, -RmG[1]], [-RmG[2], RmG[1], 0]]):
	RF := evalm(R&*F):
	Px := matrix([[0, -P[3], P[2]], [P[3], 0, -P[1]], [-P[2], P[1], 0]]):
	#print(map(x->if x=0 then 0 else 1 fi, Inertia));
	print(cat(`Frame `,j));
	RETURN([m, evalm(RmG+m*P), evalm(R&*IO&*transpose(R)-m*Px&*Px-Px&*RmGx-RmGx&*Px), evalm(RF), evalm(R&*M+Px&*RF), evalm(Inertia)]):
end:

InertiaMatrix := proc()
local Result;

	print(`Inertia Matrix`);
	Result := InertiaRecursion(1):
	RETURN(Result[6]):
end:

COMRecursion := proc(j)
local FrameChange, R, P, RTRdot, RTPdot, JR, JP, m, mG, IO, F, M, Inertia, k, Result, mGx, FTJP, MTJR, Fadd, Madd, RmG, RmGx, RF, Px;

	FrameChange := FrameMatrix(j):
	R := submatrix(FrameChange, 1..3, 1..3):
	P := subvector(FrameChange, 1..3, 4):
	m := eval(cat(m_,j)):
	mG := evalm(m*cat(G_,j)):
	for k from 1 to NSOL
	do
		if eval(cat(ref_,k)) = j
		then
			Result := COMRecursion(k):
			m := evalm(m+Result[1]):
			mG := evalm(mG+Result[2]):
		fi:
	od:
	RETURN([m, evalm(R&*mG+m*P)]):
end:

COMPosition := proc() option remember;
local Result;

	print(`COM Position`);
	Result := COMRecursion(1):
	RETURN(evalm(Result[2]/Result[1])):
end:

TagPosition := proc(k) option remember;
local j, matrice, trans, rot;

	j := eval(cat(reftag_,k)):
	matrice := FrameMatrix(j):
	while eval(cat(ref_,j)) > 0 do
		j := eval(cat(ref_,j)):
		matrice := evalm(FrameMatrix(j)&*matrice):
	end:
	trans := subvector(matrice, 1..3, 4):
	rot := submatrix(matrice, 1..3, 1..3):
	RETURN(evalm(trans + rot &* eval(cat(tag_,k)))):
end:

TagMatrix := proc() option remember;

	print(`Tag Matrix`);
	RETURN(matrix([seq(TagPosition(i), i=1..NTAG), COMPosition()])):
end:

ContactVector := proc() option remember;
local contact;

	print(`Contact Vector`);
	contact := matrix([seq(TagPosition(i), i=points_contact)]):
	RETURN(stackmatrix(seq(matrix(vectdim(points_contact), 1, col(contact, i)), i=1..3))):
end:

ContactJacobianMatrix := proc() option remember;
local contact;

	contact := ContactVector():
	print(`Contact Jacobian`);
	RETURN(jacobian(col(contact, 1), q)):
end:

ContactHessianVector := proc() option remember;
local contact;

	contact := ContactVector():
	print(`Contact Hessian`);
	RETURN(map(x->subs({seq(q[i](t)=q[i],i=1..NDDL)},
		subs({seq(diff(q[i](t),t)=qdot[i],i=1..NDDL)},
		diff(subs({seq(diff(q[i](t),t)=qdot[i],i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t),i=1..NDDL)},x),t)),t))), contact)):
end:

GenerateModel := proc()
local T, Tags, M, Inertia, N, NLEffects, CC, Contact, CH, ContactHessian,
	CJ, ContactJacobian;
global q, qdot;

	T := TagMatrix():
	print(`Writing file "Tags.c"`):
	T := convert(transpose(T), vector):
	Tags := makeproc(T, [T, q::array(1..vectdim(q))]):
	C(Tags, optimized, filename="Tags.c"):

	M := InertiaMatrix():
	print(`Writing file "Inertia.c"`):
	M := convert(transpose(M), vector):
	Inertia := makeproc(M, [M, q::array(1..vectdim(q))]):
	C(Inertia, optimized, filename="Inertia.c"):

	N := NLEffectsVector():
	print(`Writing file "NLEffects.c"`):
	NLEffects := makeproc(N, [N, q::array(1..vectdim(q)), qdot::array(1..vectdim(qdot))]):
	C(NLEffects, optimized, filename="NLEffects.c"):

	CC := ContactVector():
	print(`Writing file "Contact.c"`):
	CC := convert(transpose(CC), vector):
	Contact := makeproc(CC, [CC, q::array(1..vectdim(q))]):
	C(Contact, optimized, filename="Contact.c"):

	CH := ContactHessianVector():
	print(`Writing file "ContactHessian.c"`):
	CH := convert(transpose(CH), vector):
	ContactHessian := makeproc(CH, [CH, q::array(1..vectdim(q)), qdot::array(1..vectdim(qdot))]):
	C(ContactHessian, optimized, filename="ContactHessian.c"):

	CJ := ContactJacobianMatrix():
	print(`Writing file "ContactJacobian.c"`):
	CJ := convert(transpose(CJ), vector):
	ContactJacobian := makeproc(CJ, [CJ, q::array(1..vectdim(q))]):
	C(ContactJacobian, optimized, filename="ContactJacobian.c"):
end:

