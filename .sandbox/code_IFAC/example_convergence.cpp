/* Siconos is a program dedicated to modeling, simulation and control
 * of non smooth dynamical systems.
 *
 * Copyright 2018 INRIA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/* 
  Example of Linear switching DAE with a constraint defined by a multivalued operator
  Here we considere the parametrization of the sliding_repulsive case
*/

#include "example_class.hpp"

int main(int argc, char* argv[])
{
    try
    {

        unsigned int dimX       = 3;    // Dimension of the system state variables
        unsigned int dimLambda  = 3;    // Dimension of the system lambda variables

        double t0       = 0.0;          // initial computation time
        double T        = 10.0;         // final computation time 

        double x1_0     = 0.0;         // initial condition in state variable x1
        double x2_0     = 0.0;          // initial condition in state variable x2
        double z_0      = 0;            // initial condition in algebraic variable z

        SP::SiconosVector init(new SiconosVector({x1_0, x2_0, z_0}));

        SP::SiconosMatrix A( new SimpleMatrix(dimX,dimX) ); 
	
	// This correspond to the sliding repulsive case in the associated paper.        
        double B0 = -1.0;
        double B1 = 0.5;

        A->setRow(0,SiconosVector({0.0, 0.0, B0}));
        A->setRow(1,SiconosVector({0.0, 0.0, B1}));
        A->setRow(2,SiconosVector({1.0, -1.0, 0.0}));

        SP::SimpleMatrix M(new SimpleMatrix(dimX,dimX));
        (*M)(0,0) = 1.0;
        (*M)(1,1) = 1.0;

        SP::SiconosVector b(new SiconosVector({1.0, 0.0, 1.0}));

        SP::SimpleMatrix C( new SimpleMatrix(dimLambda,dimX) );
        (*C)(0,0) = 2.0;
        (*C)(1,0) = 1.0;

        SP::SimpleMatrix D( new SimpleMatrix(dimLambda,dimLambda) );
        (*D)(0,0) = 1.0;
        (*D)(1,2) = 1.0;
        (*D)(2,1) = -1.0;

        SP::SimpleMatrix R( new SimpleMatrix(dimX,dimLambda) );
        (*R)(2,0) = 1.0;
        (*R)(2,1) = -1.0;

        SP::SiconosVector e(new SiconosVector({0.0, 0.0, 2.0}));
        ProblemType type = SLIDING_REPULSIVE;  // change the problem type if needed
        Problem* problem = new Problem( A, R, b, C, D, e, M, init, t0, T, type);

        //generated by np.logspace(-4.4,0.0,100,endpoint=True, base=10.0) in python 3
         vector<double> time_steps({ 3.98107171e-05, 4.41005945e-05, 4.88527357e-05, 5.41169527e-05,
                                     5.99484250e-05, 6.64082785e-05, 7.35642254e-05, 8.14912747e-05,
                                     9.02725178e-05, 1.00000000e-04, 1.10775685e-04, 1.22712524e-04,
                                     1.35935639e-04, 1.50583635e-04, 1.66810054e-04, 1.84784980e-04,
                                     2.04696827e-04, 2.26754313e-04, 2.51188643e-04, 2.78255940e-04,
                                     3.08239924e-04, 3.41454887e-04, 3.78248991e-04, 4.19007911e-04,
                                     4.64158883e-04, 5.14175183e-04, 5.69581081e-04, 6.30957344e-04,
                                     6.98947321e-04, 7.74263683e-04, 8.57695899e-04, 9.50118507e-04,
                                     1.05250029e-03, 1.16591440e-03, 1.29154967e-03, 1.43072299e-03,
                                     1.58489319e-03, 1.75567629e-03, 1.94486244e-03, 2.15443469e-03,
                                     2.38658979e-03, 2.64376119e-03, 2.92864456e-03, 3.24422608e-03,
                                     3.59381366e-03, 3.98107171e-03, 4.41005945e-03, 4.88527357e-03,
                                     5.41169527e-03, 5.99484250e-03, 6.64082785e-03, 7.35642254e-03,
                                     8.14912747e-03, 9.02725178e-03, 1.00000000e-02, 1.10775685e-02,
                                     1.22712524e-02, 1.35935639e-02, 1.50583635e-02, 1.66810054e-02,
                                     1.84784980e-02, 2.04696827e-02, 2.26754313e-02, 2.51188643e-02,
                                     2.78255940e-02, 3.08239924e-02, 3.41454887e-02, 3.78248991e-02,
                                     4.19007911e-02, 4.64158883e-02, 5.14175183e-02, 5.69581081e-02,
                                     6.30957344e-02, 6.98947321e-02, 7.74263683e-02, 8.57695899e-02,
                                     9.50118507e-02, 1.05250029e-01, 1.16591440e-01, 1.29154967e-01,
                                     1.43072299e-01, 1.58489319e-01, 1.75567629e-01, 1.94486244e-01,
                                     2.15443469e-01, 2.38658979e-01, 2.64376119e-01, 2.92864456e-01,
                                     3.24422608e-01, 3.59381366e-01, 3.98107171e-01, 4.41005945e-01,
                                     4.88527357e-01, 5.41169527e-01, 5.99484250e-01, 6.64082785e-01,
                                     7.35642254e-01, 8.14912747e-01, 9.02725178e-01, 1.00000000e+00});
        // vector<double> time_steps({ 0.009, 0.09, 0.9, 1.0});
        ConvergenceTest test(problem, time_steps);
        vector<double> errors = test.run();
        SiconosVector res(errors);
        cout << res << endl;

        SimpleMatrix results = SimpleMatrix(time_steps.size(),1);
        results.setCol(0,res);

          // --- Output files ---
        cout << "====> Output file writing ..." << endl;
        ioMatrix::write("convergence_error.dat", "ascii", results, "noDim");
    }
    catch (SiconosException& e)    
    {
    cerr << e.report() << endl;
    return 1;
    }

    catch (...) 
    {
    cerr << "Exception caught in example_converge.cpp" << endl;
    return 1;
    }


}
