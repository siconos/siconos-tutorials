variables:
  # Default os (docker image)
  os: ubuntu:18.04
  # Default 'reference' tag for siconos
  tag: 4.2.0
  # Default ctest model. Warning : overwritten if set in schedules variables (as we expect)
  ctest_build_model: Continuous

  
stages:
  - build
  - test
  - build-mechanisms
  - test-mechanisms


image: $os

cache:
    paths:
    - .apt/


before_script:
   - export CTEST_MODEL=$ctest_build_model
        # Configure apt chaching
   - echo $CI_PROJECT_DIR
   - export APT_DIR=$CI_PROJECT_DIR/.apt && export APT_STATE_LISTS=$APT_DIR/lists && export APT_CACHE_ARCHIVES=$APT_DIR/archives
   - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf
   - mkdir -p "${APT_STATE_LISTS}/partial" && mkdir -p "${APT_CACHE_ARCHIVES}/partial"
   - apt update -qq > /dev/null
   - apt install -y -qq cmake git-core wget make
     libboost-dev libgmp-dev swig gcc gfortran g++ liblapack-dev
     libatlas-base-dev lp-solve liblpsolve55-dev python3-dev
     libpython3-dev bash swig doxygen python3-pip htop
     libcppunit-dev python3-scipy python3-pytest valgrind python3-h5py > /dev/null


docker-build:ubuntu:
  stage: build
  image: docker
  script:
    - docker build -t $DOCKER_LOGIN/siconos-ubuntu:18.04 ci/dockerfiles/build-ubuntu-18.04
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_LOGIN --password-stdin
    - docker push $DOCKER_LOGIN/siconos-ubuntu:18.04
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /^\[docker-build\].*/i



# This job clone, build and install on default os (ubuntu)
# siconos software, with the 'standard' config
# (release, all components, without oce)
# Installed path is transfered to next job (examples) using artifacts.
ubuntu:install_siconos:
  stage: build
  script:
    - "sh ci/install_siconos.sh $os" 
  artifacts:
    paths:
      - install-siconos
  only:
  - master

# This job clone, build and install siconos examples 
# (from siconos-tutorials), using Siconos installed in
# job 'ubuntu:install_siconos'
# allow_failure is set to true to authorize next stages jobs to run.
ubuntu:build_and_run_examples:
  stage: test
  script:
    - "sh ci/build_and_run_examples.sh $os"
  only:
  - master
  dependencies:
   - ubuntu:install_siconos
  allow_failure: true

# This job clone, build and install siconos software
# on default os (ubuntu), with the 'mechanisms' config
# (release, all components, with oce and pythonocc)
# OCE is installed using ubuntu packages
# pythonocc is cloned from github repo, built and installed.
#
# Installed paths are transfered to next job (examples) using artifacts.
ubuntu:install_siconos_with_mechanisms:
  stage: build-mechanisms
  script:
    - apt install -y libbullet-dev libbullet-dev libfreetype6-dev freeglut3-dev > /dev/null
    - apt install -y liboce-foundation-dev liboce-modeling-dev liboce-ocaf-dev liboce-visualization-dev > /dev/null
    - "sh ci/install_oce.sh"
    - export PYTHONPATH=$CI_PROJECT_DIR/install/site-packages
    - "sh ci/install_siconos_with_mechanisms.sh $os" 
  artifacts:
    paths:
      - $CI_PROJECT_DIR/install/
      - install-siconos
  only:
  - master
  allow_failure: true
  
# This job clone, build and install siconos examples 
# (from siconos-tutorials), using Siconos installed in
# job 'ubuntu:install_siconos_with_mechanisms' and thus
# includes all examples based on oce.
# OCE is installed using ubuntu packages
# pythonocc comes from artifacts of job ubuntu:install_siconos_with_mechanisms
ubuntu:build_and_run_examples_with_mechanisms:
  stage: test-mechanisms
  script:
    - apt install -y libbullet-dev libfreetype6-dev freeglut3-dev > /dev/null
    - apt install -y liboce-foundation-dev liboce-modeling-dev liboce-ocaf-dev liboce-visualization-dev > /dev/null
    - export PYTHONPATH=$CI_PROJECT_DIR/install/site-packages
    - export EXTRA_BUILDNAME="With Bullet and OCE"
    - "sh ci/build_and_run_examples.sh $os"
  only:
  - master
  dependencies:
   - ubuntu:install_siconos_with_mechanisms
  allow_failure: true
  
# This job clone, build and install siconos software  
# on archlinux os, with the 'mechanisms' config
# (release, all components, with oce and pythonocc)
# OCE and pythonocc are cloned from github repo, built and installed.
#
# Installed paths are transfered to next job (examples) using artifacts.
archlinux:install_siconos_with_mechanisms:
  stage: build-mechanisms
  image: base/archlinux
  before_script:
    - export CTEST_MODEL=$ctest_build_model
    - 'pacman -Sy && pacman --noconfirm -S - < ci/arch_linux_packages.txt'
  script:
    - "sh ci/install_oce.sh clone_oce"
    - export PYTHONPATH=$CI_PROJECT_DIR/install/site-packages
    - export OCE_INSTALL=`grep OCEConfig.cmake $CI_PROJECT_DIR/build/oce-last/install_manifest.txt| sed 's/OCEConfig.cmake//g'`
    - "sh ci/install_siconos_with_mechanisms.sh archlinux"
  only:
  - master
  artifacts:
    paths:
      - $CI_PROJECT_DIR/install/
      - install-siconos
  allow_failure: true
  
# This job clone, build and install siconos examples 
# (from siconos-tutorials), using Siconos installed in
# job 'archlinux:install_siconos_with_mechanisms' and thus
# includes all examples based on oce.
# OCE and pythonocc comes from artifacts of job archlinux:install_siconos_with_mechanisms
archlinux:build_and_run_examples_with_mechanisms:
  stage: test-mechanisms
  image: base/archlinux
  before_script:
    - export CTEST_MODEL=$ctest_build_model
    - 'pacman -Sy && pacman --noconfirm -S - < ci/arch_linux_packages.txt'
  script:
    - export PYTHONPATH=$CI_PROJECT_DIR/install/site-packages
    - export EXTRA_BUILDNAME="With Bullet and OCE"
    - "sh ci/build_and_run_examples.sh archlinux"
  only:
  - master
  dependencies:
   - archlinux:install_siconos_with_mechanisms
  allow_failure: true


# This job clone, build and install siconos
# but for the last tagged release, 4.2.0
# that was containing examples (before
# the split siconos/siconos-tutorials).
# OS is ubuntu.
# Examples are also built and tested.
# OCE is installed using ubuntu packages
# pythonocc is cloned from github repo, built and installed.
#
# This job is run only for nightly builds, not on every push.
ubuntu:siconos_examples_release:
  stage: test-mechanisms
  only:
    - schedules
  script:
    - apt install -y libbullet-dev libfreetype6-dev freeglut3-dev > /dev/null
    - apt install -y liboce-foundation-dev liboce-modeling-dev liboce-ocaf-dev liboce-visualization-dev > /dev/null
    - "sh ci/install_oce.sh" 
    - export PYTHONPATH=$CI_PROJECT_DIR/install/site-packages
    - export EXTRA_BUILDNAME="With Bullet and OCE"
    - "sh ci/run_all_stages_release.sh $os $tag"
  only:
  - master